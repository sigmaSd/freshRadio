// This file is generated by compileMap.ts
drawMap();
async function drawMap() {
  let activeCountry =
    Intl.DateTimeFormat().resolvedOptions().timeZone.split("/")[1];
  const btn = document.getElementById("goBtn");
  btn.onclick = () => {
    window.location.href = `/byCountry/${activeCountry}`;
  };
  const latlng = await getLatLng(activeCountry);
  const map = L.map("map");
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
  }).addTo(map);
  let activeMark = L.marker(latlng).addTo(map).bindPopup(
    `Selected '${activeCountry}'`,
  ).openPopup();
  map.setView(latlng, 4);
  map.on("click", async (ev) => {
    activeMark.remove();
    [activeMark, activeCountry] = await onMapClick(ev);
  });
}
async function onMapClick(ev) {
  const map = ev.target;
  const activeCountry = await countryFromLatLng(ev.latlng);
  const latlon = await getLatLng(activeCountry);
  const activeMark = L.marker(latlon).addTo(map).bindPopup(
    `Selected '${activeCountry}'`,
  ).openPopup();
  return [
    activeMark,
    activeCountry,
  ];
}
async function getLatLng(cn) {
  const resp = await fetch(
    `https://nominatim.openstreetmap.org/search.php?country=${cn}&format=json`,
  ).then((r) => r.json());
  const lat = resp[0].lat;
  const lon = resp[0].lon;
  return [
    parseFloat(lat),
    parseFloat(lon),
  ];
}
async function countryFromLatLng({ lat, lng }) {
  const url =
    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
  return await fetch(url).then((r) => r.json()).then((r) => r.address.country);
} //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9tcmNvb2wvZGV2L2Rlbm8vZnJlc2gvcmFkaW8yL3N0YXRpYy9tYXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZHJhd01hcCgpO1xuYXN5bmMgZnVuY3Rpb24gZHJhd01hcCgpIHtcbiAgbGV0IGFjdGl2ZUNvdW50cnkgPSBJbnRsLkRhdGVUaW1lRm9ybWF0KClcbiAgICAucmVzb2x2ZWRPcHRpb25zKClcbiAgICAudGltZVpvbmUuc3BsaXQoXCIvXCIpWzFdO1xuICBjb25zdCBidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdvQnRuXCIpO1xuICBidG4ub25jbGljayA9ICgpID0+IHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYnlDb3VudHJ5LyR7YWN0aXZlQ291bnRyeX1gO1xuICB9O1xuICBjb25zdCBsYXRsbmcgPSBhd2FpdCBnZXRMYXRMbmcoYWN0aXZlQ291bnRyeSk7XG4gIGNvbnN0IG1hcCA9IEwubWFwKFwibWFwXCIpO1xuICBMLnRpbGVMYXllcihcImh0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nXCIsIHtcbiAgICBhdHRyaWJ1dGlvbjpcbiAgICAgICcmY29weTsgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycycsXG4gIH0pLmFkZFRvKG1hcCk7XG4gIGxldCBhY3RpdmVNYXJrID0gTC5tYXJrZXIobGF0bG5nKS5hZGRUbyhtYXApXG4gICAgLmJpbmRQb3B1cChgU2VsZWN0ZWQgJyR7YWN0aXZlQ291bnRyeX0nYClcbiAgICAub3BlblBvcHVwKCk7XG4gIG1hcC5zZXRWaWV3KGxhdGxuZywgNCk7XG4gIG1hcC5vbihcImNsaWNrXCIsIGFzeW5jIChldikgPT4ge1xuICAgIGFjdGl2ZU1hcmsucmVtb3ZlKCk7XG4gICAgW2FjdGl2ZU1hcmssIGFjdGl2ZUNvdW50cnldID0gYXdhaXQgb25NYXBDbGljayhldik7XG4gIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gb25NYXBDbGljayhldikge1xuICBjb25zdCBtYXAgPSBldi50YXJnZXQ7XG4gIGNvbnN0IGFjdGl2ZUNvdW50cnkgPSBhd2FpdCBjb3VudHJ5RnJvbUxhdExuZyhldi5sYXRsbmcpO1xuICBjb25zdCBsYXRsb24gPSBhd2FpdCBnZXRMYXRMbmcoYWN0aXZlQ291bnRyeSk7XG4gIGNvbnN0IGFjdGl2ZU1hcmsgPSBMLm1hcmtlcihsYXRsb24pLmFkZFRvKG1hcClcbiAgICAuYmluZFBvcHVwKGBTZWxlY3RlZCAnJHthY3RpdmVDb3VudHJ5fSdgKVxuICAgIC5vcGVuUG9wdXAoKTtcbiAgcmV0dXJuIFthY3RpdmVNYXJrLCBhY3RpdmVDb3VudHJ5XTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldExhdExuZyhjbikge1xuICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2goXG4gICAgYGh0dHBzOi8vbm9taW5hdGltLm9wZW5zdHJlZXRtYXAub3JnL3NlYXJjaC5waHA/Y291bnRyeT0ke2NufSZmb3JtYXQ9anNvbmAsXG4gICkudGhlbigocikgPT4gci5qc29uKCkpO1xuICBjb25zdCBsYXQgPSByZXNwWzBdLmxhdDtcbiAgY29uc3QgbG9uID0gcmVzcFswXS5sb247XG4gIHJldHVybiBbcGFyc2VGbG9hdChsYXQpLCBwYXJzZUZsb2F0KGxvbildO1xufVxuYXN5bmMgZnVuY3Rpb24gY291bnRyeUZyb21MYXRMbmcoeyBsYXQsIGxuZyB9KSB7XG4gIGNvbnN0IHVybCA9XG4gICAgYGh0dHBzOi8vbm9taW5hdGltLm9wZW5zdHJlZXRtYXAub3JnL3JldmVyc2U/Zm9ybWF0PWpzb24mbGF0PSR7bGF0fSZsb249JHtsbmd9YDtcbiAgcmV0dXJuIGF3YWl0IGZldGNoKHVybCkudGhlbigocikgPT4gci5qc29uKCkpLnRoZW4oKHIpID0+IHIuYWRkcmVzcy5jb3VudHJ5KTtcbn1cbiJdLCJuYW1lcyI6W10sIm1h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
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;base64,
