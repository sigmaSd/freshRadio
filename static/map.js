// This file is generated by compileMap.ts
/// <reference no-default-lib="true" />
/// <reference lib="dom" />
/// <reference lib="es2015" />
import "https://esm.sh/leaflet@1.9.3";
import L from "https://esm.sh/leaflet@1.9.3";
drawMap();
async function drawMap() {
  let activeCountry =
    Intl.DateTimeFormat().resolvedOptions().timeZone.split("/")[1];
  const btn = document.getElementById("goBtn");
  btn.onclick = () => {
    window.location.href = `/byCountry/${activeCountry}`;
  };
  const latlng = await getLatLng(activeCountry);
  const map = L.map("map");
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
  }).addTo(map);
  let activeMark = L.marker(latlng).addTo(map).bindPopup(
    `Selected '${activeCountry}'`,
  ).openPopup();
  map.setView(latlng, 4);
  map.on("click", async (ev) => {
    activeMark.remove();
    const result = await onMapClick(ev);
    if (result) {
      activeMark = result[0];
      activeCountry = result[1];
    }
  });
}
async function onMapClick(ev) {
  const map = ev.target;
  const activeCountry = await countryFromLatLng(ev.latlng);
  if (!activeCountry) {
    return;
  }
  const latlon = await getLatLng(activeCountry);
  const activeMark = L.marker(latlon).addTo(map).bindPopup(
    `Selected '${activeCountry}'`,
  ).openPopup();
  return [
    activeMark,
    activeCountry,
  ];
}
async function getLatLng(cn) {
  const resp = await fetch(
    `https://nominatim.openstreetmap.org/search.php?country=${cn}&format=json`,
  ).then((r) => r.json());
  const lat = resp[0].lat;
  const lon = resp[0].lon;
  return [
    parseFloat(lat),
    parseFloat(lon),
  ];
}
async function countryFromLatLng({ lat, lng }) {
  const url = // make sure we get english country names because that's what the database expects.
    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=en`;
  return await fetch(url).then((r) => r.json()).then((r) =>
    r.address?.country || ""
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9tcmNvb2wvZGV2L2Rlbm8vZnJlc2gvcmFkaW8yL3N0YXRpY19zZXJ2ZXIvbWFwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIG5vLWRlZmF1bHQtbGliPVwidHJ1ZVwiIC8+XG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZXMyMDE1XCIgLz5cbmltcG9ydCBcImh0dHBzOi8vZXNtLnNoL2xlYWZsZXRAMS45LjNcIjtcbmltcG9ydCBMIGZyb20gXCJodHRwczovL2VzbS5zaC9sZWFmbGV0QDEuOS4zXCI7XG5cbmRyYXdNYXAoKTtcblxuYXN5bmMgZnVuY3Rpb24gZHJhd01hcCgpIHtcbiAgbGV0IGFjdGl2ZUNvdW50cnkgPSBJbnRsLkRhdGVUaW1lRm9ybWF0KClcbiAgICAucmVzb2x2ZWRPcHRpb25zKClcbiAgICAudGltZVpvbmUuc3BsaXQoXCIvXCIpWzFdO1xuXG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ29CdG5cIikhO1xuICBidG4ub25jbGljayA9ICgpID0+IHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYnlDb3VudHJ5LyR7YWN0aXZlQ291bnRyeX1gO1xuICB9O1xuICBjb25zdCBsYXRsbmcgPSBhd2FpdCBnZXRMYXRMbmcoYWN0aXZlQ291bnRyeSk7XG4gIGNvbnN0IG1hcCA9IEwubWFwKFwibWFwXCIpO1xuXG4gIEwudGlsZUxheWVyKFwiaHR0cHM6Ly97c30udGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmdcIiwge1xuICAgIGF0dHJpYnV0aW9uOlxuICAgICAgJyZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0XCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzJyxcbiAgfSkuYWRkVG8obWFwKTtcblxuICBsZXQgYWN0aXZlTWFyayA9IEwubWFya2VyKGxhdGxuZykuYWRkVG8obWFwKVxuICAgIC5iaW5kUG9wdXAoYFNlbGVjdGVkICcke2FjdGl2ZUNvdW50cnl9J2ApXG4gICAgLm9wZW5Qb3B1cCgpO1xuXG4gIG1hcC5zZXRWaWV3KGxhdGxuZywgNCk7XG4gIG1hcC5vbihcbiAgICBcImNsaWNrXCIsXG4gICAgYXN5bmMgKGV2KSA9PiB7XG4gICAgICBhY3RpdmVNYXJrLnJlbW92ZSgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb25NYXBDbGljayhldiBhcyBMLkxlYWZsZXRNb3VzZUV2ZW50KTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgYWN0aXZlTWFyayA9IHJlc3VsdFswXTtcbiAgICAgICAgYWN0aXZlQ291bnRyeSA9IHJlc3VsdFsxXTtcbiAgICAgIH1cbiAgICB9LFxuICApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBvbk1hcENsaWNrKFxuICBldjogTC5MZWFmbGV0TW91c2VFdmVudCxcbik6IFByb21pc2U8W0wuTWFya2VyLCBzdHJpbmddIHwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0IG1hcDogTC5NYXAgPSBldi50YXJnZXQ7XG5cbiAgY29uc3QgYWN0aXZlQ291bnRyeSA9IGF3YWl0IGNvdW50cnlGcm9tTGF0TG5nKGV2LmxhdGxuZyk7XG4gIGlmICghYWN0aXZlQ291bnRyeSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsYXRsb24gPSBhd2FpdCBnZXRMYXRMbmcoYWN0aXZlQ291bnRyeSk7XG4gIGNvbnN0IGFjdGl2ZU1hcmsgPSBMLm1hcmtlcihsYXRsb24pLmFkZFRvKG1hcClcbiAgICAuYmluZFBvcHVwKGBTZWxlY3RlZCAnJHthY3RpdmVDb3VudHJ5fSdgKVxuICAgIC5vcGVuUG9wdXAoKTtcbiAgcmV0dXJuIFthY3RpdmVNYXJrLCBhY3RpdmVDb3VudHJ5XTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TGF0TG5nKGNuOiBzdHJpbmcpOiBQcm9taXNlPFtudW1iZXIsIG51bWJlcl0+IHtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKFxuICAgIGBodHRwczovL25vbWluYXRpbS5vcGVuc3RyZWV0bWFwLm9yZy9zZWFyY2gucGhwP2NvdW50cnk9JHtjbn0mZm9ybWF0PWpzb25gLFxuICApLnRoZW4oKHIpID0+IHIuanNvbigpKTtcbiAgY29uc3QgbGF0ID0gcmVzcFswXS5sYXQ7XG4gIGNvbnN0IGxvbiA9IHJlc3BbMF0ubG9uO1xuICByZXR1cm4gW3BhcnNlRmxvYXQobGF0KSwgcGFyc2VGbG9hdChsb24pXTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY291bnRyeUZyb21MYXRMbmcoXG4gIHsgbGF0LCBsbmcgfTogeyBsYXQ6IG51bWJlcjsgbG5nOiBudW1iZXIgfSxcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHVybCA9XG4gICAgLy8gbWFrZSBzdXJlIHdlIGdldCBlbmdsaXNoIGNvdW50cnkgbmFtZXMgYmVjYXVzZSB0aGF0J3Mgd2hhdCB0aGUgZGF0YWJhc2UgZXhwZWN0cy5cbiAgICBgaHR0cHM6Ly9ub21pbmF0aW0ub3BlbnN0cmVldG1hcC5vcmcvcmV2ZXJzZT9mb3JtYXQ9anNvbiZsYXQ9JHtsYXR9Jmxvbj0ke2xuZ30mYWNjZXB0LWxhbmd1YWdlPWVuYDtcbiAgcmV0dXJuIGF3YWl0IGZldGNoKHVybCkudGhlbigocikgPT4gci5qc29uKCkpLnRoZW4oKHIpID0+XG4gICAgci5hZGRyZXNzPy5jb3VudHJ5IHx8IFwiXCJcbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFDdkMsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUM5QixPQUFPLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxNQUFNLDhCQUE4QixDQUFDO0FBRTdDLE9BQU8sRUFBRSxDQUFDO0FBRVYsZUFBZSxPQUFPLEdBQUc7SUFDdkIsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUN0QyxlQUFlLEVBQUUsQ0FDakIsUUFB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
