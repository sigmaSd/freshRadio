// This file is generated by compileMap.ts
// Frontend
/// <reference no-default-lib="true" />
/// <reference lib="dom" />
/// <reference lib="es2015" />
import "https://esm.sh/leaflet@1.9.3";
import L from "https://esm.sh/leaflet@1.9.3";
drawMap();
async function drawMap() {
  let activeCountry =
    Intl.DateTimeFormat().resolvedOptions().timeZone.split("/")[1];
  const btn = document.getElementById("goBtn");
  btn.onclick = () => {
    window.location.href = `/byCountry/${activeCountry}`;
  };
  const latlng = await getLatLng(activeCountry);
  const map = L.map("map");
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
  }).addTo(map);
  let activeMark = L.marker(latlng).addTo(map).bindPopup(
    `Selected '${activeCountry}'`,
  ).openPopup();
  map.setView(latlng, 4);
  map.on("click", async (ev) => {
    activeMark.remove();
    const result = await onMapClick(ev);
    if (result) {
      activeMark = result[0];
      activeCountry = result[1];
    }
  });
}
async function onMapClick(ev) {
  const map = ev.target;
  const activeCountry = await countryFromLatLng(ev.latlng);
  if (!activeCountry) {
    return;
  }
  const latlon = await getLatLng(activeCountry);
  const activeMark = L.marker(latlon).addTo(map).bindPopup(
    `Selected '${activeCountry}'`,
  ).openPopup();
  return [
    activeMark,
    activeCountry,
  ];
}
async function getLatLng(cn) {
  const resp = await fetch(
    `https://nominatim.openstreetmap.org/search.php?country=${cn}&format=json`,
  ).then((r) => r.json());
  const lat = resp[0].lat;
  const lon = resp[0].lon;
  return [
    parseFloat(lat),
    parseFloat(lon),
  ];
}
async function countryFromLatLng({ lat, lng }) {
  const url = // make sure we get english country names because that's what the database expects.
    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=en`;
  return await fetch(url).then((r) => r.json()).then((r) =>
    r.address?.country || ""
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9tcmNvb2wvZGV2L2Rlbm8vZnJlc2gvcmFkaW8yL3N0YXRpY19zZXJ2ZXIvbWFwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZyb250ZW5kXG4vLy8gPHJlZmVyZW5jZSBuby1kZWZhdWx0LWxpYj1cInRydWVcIiAvPlxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImVzMjAxNVwiIC8+XG5pbXBvcnQgXCJodHRwczovL2VzbS5zaC9sZWFmbGV0QDEuOS4zXCI7XG5pbXBvcnQgTCBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvbGVhZmxldEAxLjkuM1wiO1xuXG5kcmF3TWFwKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGRyYXdNYXAoKSB7XG4gIGxldCBhY3RpdmVDb3VudHJ5ID0gSW50bC5EYXRlVGltZUZvcm1hdCgpXG4gICAgLnJlc29sdmVkT3B0aW9ucygpXG4gICAgLnRpbWVab25lLnNwbGl0KFwiL1wiKVsxXTtcblxuICBjb25zdCBidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdvQnRuXCIpITtcbiAgYnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgL2J5Q291bnRyeS8ke2FjdGl2ZUNvdW50cnl9YDtcbiAgfTtcbiAgY29uc3QgbGF0bG5nID0gYXdhaXQgZ2V0TGF0TG5nKGFjdGl2ZUNvdW50cnkpO1xuICBjb25zdCBtYXAgPSBMLm1hcChcIm1hcFwiKTtcblxuICBMLnRpbGVMYXllcihcImh0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nXCIsIHtcbiAgICBhdHRyaWJ1dGlvbjpcbiAgICAgICcmY29weTsgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycycsXG4gIH0pLmFkZFRvKG1hcCk7XG5cbiAgbGV0IGFjdGl2ZU1hcmsgPSBMLm1hcmtlcihsYXRsbmcpLmFkZFRvKG1hcClcbiAgICAuYmluZFBvcHVwKGBTZWxlY3RlZCAnJHthY3RpdmVDb3VudHJ5fSdgKVxuICAgIC5vcGVuUG9wdXAoKTtcblxuICBtYXAuc2V0VmlldyhsYXRsbmcsIDQpO1xuICBtYXAub24oXG4gICAgXCJjbGlja1wiLFxuICAgIGFzeW5jIChldikgPT4ge1xuICAgICAgYWN0aXZlTWFyay5yZW1vdmUoKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9uTWFwQ2xpY2soZXYgYXMgTC5MZWFmbGV0TW91c2VFdmVudCk7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGFjdGl2ZU1hcmsgPSByZXN1bHRbMF07XG4gICAgICAgIGFjdGl2ZUNvdW50cnkgPSByZXN1bHRbMV07XG4gICAgICB9XG4gICAgfSxcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gb25NYXBDbGljayhcbiAgZXY6IEwuTGVhZmxldE1vdXNlRXZlbnQsXG4pOiBQcm9taXNlPFtMLk1hcmtlciwgc3RyaW5nXSB8IHVuZGVmaW5lZD4ge1xuICBjb25zdCBtYXA6IEwuTWFwID0gZXYudGFyZ2V0O1xuXG4gIGNvbnN0IGFjdGl2ZUNvdW50cnkgPSBhd2FpdCBjb3VudHJ5RnJvbUxhdExuZyhldi5sYXRsbmcpO1xuICBpZiAoIWFjdGl2ZUNvdW50cnkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbGF0bG9uID0gYXdhaXQgZ2V0TGF0TG5nKGFjdGl2ZUNvdW50cnkpO1xuICBjb25zdCBhY3RpdmVNYXJrID0gTC5tYXJrZXIobGF0bG9uKS5hZGRUbyhtYXApXG4gICAgLmJpbmRQb3B1cChgU2VsZWN0ZWQgJyR7YWN0aXZlQ291bnRyeX0nYClcbiAgICAub3BlblBvcHVwKCk7XG4gIHJldHVybiBbYWN0aXZlTWFyaywgYWN0aXZlQ291bnRyeV07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldExhdExuZyhjbjogc3RyaW5nKTogUHJvbWlzZTxbbnVtYmVyLCBudW1iZXJdPiB7XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaChcbiAgICBgaHR0cHM6Ly9ub21pbmF0aW0ub3BlbnN0cmVldG1hcC5vcmcvc2VhcmNoLnBocD9jb3VudHJ5PSR7Y259JmZvcm1hdD1qc29uYCxcbiAgKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG4gIGNvbnN0IGxhdCA9IHJlc3BbMF0ubGF0O1xuICBjb25zdCBsb24gPSByZXNwWzBdLmxvbjtcbiAgcmV0dXJuIFtwYXJzZUZsb2F0KGxhdCksIHBhcnNlRmxvYXQobG9uKV07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvdW50cnlGcm9tTGF0TG5nKFxuICB7IGxhdCwgbG5nIH06IHsgbGF0OiBudW1iZXI7IGxuZzogbnVtYmVyIH0sXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB1cmwgPVxuICAgIC8vIG1ha2Ugc3VyZSB3ZSBnZXQgZW5nbGlzaCBjb3VudHJ5IG5hbWVzIGJlY2F1c2UgdGhhdCdzIHdoYXQgdGhlIGRhdGFiYXNlIGV4cGVjdHMuXG4gICAgYGh0dHBzOi8vbm9taW5hdGltLm9wZW5zdHJlZXRtYXAub3JnL3JldmVyc2U/Zm9ybWF0PWpzb24mbGF0PSR7bGF0fSZsb249JHtsbmd9JmFjY2VwdC1sYW5ndWFnZT1lbmA7XG4gIHJldHVybiBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHIpID0+IHIuanNvbigpKS50aGVuKChyKSA9PlxuICAgIHIuYWRkcmVzcz8uY291bnRyeSB8fCBcIlwiXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVztBQUNYLHVDQUF1QztBQUN2QywyQkFBMkI7QUFDM0IsOEJBQThCO0FBQzlCLE9BQU8sK0JBQStCO0FBQ3RDLE9BQU8sT0FBTywrQkFBK0I7QUFFN0M7QUFFQSxlQUFlLFVBQVU7SUFDdkIsSUFBSSxnQkFBZ0IsS0FBSyxjQUFjLEdBQ3BDLGVBQWUsR0FDZixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBRXpCLE1BQU0sTUFBTSxTQUFTLGNBQWMsQ0FBQztJQUNwQyxJQUFJLE9BQU8sR0FBRyxJQUFNO1FBQ2xCLE9BQU8sUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUM7SUFDdEQ7SUFDQSxNQUFNLFNBQVMsTUFBTSxVQUFVO0lBQy9CLE1BQU0sTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUVsQixFQUFFLFNBQVMsQ0FBQyxzREFBc0Q7UUFDaEUsYUFDRTtJQUNKLEdBQUcsS0FBSyxDQUFDO0lBRVQsSUFBSSxhQUFhLEVBQUUsTUFBTSxDQUFDLFFBQVEsS0FBSyxDQUFDLEtBQ3JDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUN2QyxTQUFTO0lBRVosSUFBSSxPQUFPLENBQUMsUUFBUTtJQUNwQixJQUFJLEVBQUUsQ0FDSixTQUNBLE9BQU8sS0FBTztRQUNaLFdBQVcsTUFBTTtRQUNqQixNQUFNLFNBQVMsTUFBTSxXQUFXO1FBQ2hDLElBQUksUUFBUTtZQUNWLGFBQWEsTUFBTSxDQUFDLEVBQUU7WUFDdEIsZ0JBQWdCLE1BQU0sQ0FBQyxFQUFFO1FBQzNCLENBQUM7SUFDSDtBQUVKO0FBRUEsZUFBZSxXQUNiLEVBQXVCLEVBQ2tCO0lBQ3pDLE1BQU0sTUFBYSxHQUFHLE1BQU07SUFFNUIsTUFBTSxnQkFBZ0IsTUFBTSxrQkFBa0IsR0FBRyxNQUFNO0lBQ3ZELElBQUksQ0FBQyxlQUFlO1FBQ2xCO0lBQ0YsQ0FBQztJQUNELE1BQU0sU0FBUyxNQUFNLFVBQVU7SUFDL0IsTUFBTSxhQUFhLEVBQUUsTUFBTSxDQUFDLFFBQVEsS0FBSyxDQUFDLEtBQ3ZDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUN2QyxTQUFTO0lBQ1osT0FBTztRQUFDO1FBQVk7S0FBYztBQUNwQztBQUVBLGVBQWUsVUFBVSxFQUFVLEVBQTZCO0lBQzlELE1BQU0sT0FBTyxNQUFNLE1BQ2pCLENBQUMsdURBQXVELEVBQUUsR0FBRyxZQUFZLENBQUMsRUFDMUUsSUFBSSxDQUFDLENBQUMsSUFBTSxFQUFFLElBQUk7SUFDcEIsTUFBTSxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRztJQUN2QixNQUFNLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO0lBQ3ZCLE9BQU87UUFBQyxXQUFXO1FBQU0sV0FBVztLQUFLO0FBQzNDO0FBRUEsZUFBZSxrQkFDYixFQUFFLElBQUcsRUFBRSxJQUFHLEVBQWdDLEVBQ3pCO0lBQ2pCLE1BQU0sTUFDSixtRkFBbUY7SUFDbkYsQ0FBQyw0REFBNEQsRUFBRSxJQUFJLEtBQUssRUFBRSxJQUFJLG1CQUFtQixDQUFDO0lBQ3BHLE9BQU8sTUFBTSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBTSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUNsRCxFQUFFLE9BQU8sRUFBRSxXQUFXO0FBRTFCIn0=
